"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Prophet.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç grid search –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
"""
import sys
import os
import pandas as pd
import numpy as np
from pathlib import Path
from itertools import product

sys.path.insert(0, str(Path(__file__).parent.parent))

from app.train import train_prophet
import json
import logging

logging.basicConfig(level=logging.WARNING)  # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

def hyperparameter_tuning(shop_csv_path: str, output_dir: str = "models/tuned"):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Prophet.
    """
    print("=" * 80)
    print("–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ì–ò–ü–ï–†–ü–ê–†–ê–ú–ï–¢–†–û–í PROPHET")
    print("=" * 80)
    
    os.makedirs(output_dir, exist_ok=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    param_grid = {
        'changepoint_prior_scale': [0.005, 0.01, 0.05, 0.1],
        'seasonality_prior_scale': [5.0, 10.0, 15.0, 20.0],
        'seasonality_mode': ['additive'],  # –¢–æ–ª—å–∫–æ additive, —Ç.–∫. multiplicative —Ö—É–∂–µ
        'log_transform': [False],  # –ë–µ–∑ log-transform, —Ç.–∫. –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ö—É–∂–µ
    }
    
    print(f"\n–ò—â—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...")
    print(f"–í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {np.prod([len(v) for v in param_grid.values()])}")
    
    results = []
    best_mape = float('inf')
    best_params = None
    best_result = None
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    keys = param_grid.keys()
    values = param_grid.values()
    
    for i, combination in enumerate(product(*values), 1):
        params = dict(zip(keys, combination))
        
        print(f"\n[{i}/{np.prod([len(v) for v in values])}] –¢–µ—Å—Ç–∏—Ä—É—é: {params}")
        
        try:
            model_path = os.path.join(output_dir, f"model_{i}.pkl")
            
            result = train_prophet(
                shop_csv_path=shop_csv_path,
                model_out_path=model_path,
                include_regressors=False,
                log_transform=params['log_transform'],
                interval_width=0.95,
                holdout_frac=0.2,
                changepoint_prior_scale=params['changepoint_prior_scale'],
                seasonality_prior_scale=params['seasonality_prior_scale'],
                seasonality_mode=params['seasonality_mode']
            )
            
            mape = result['metrics']['mape']
            
            print(f"    MAPE: {mape:.2f}%")
            
            results.append({
                'params': params,
                'mape': mape,
                'mae': result['metrics']['mae'],
                'rmse': result['metrics']['rmse'],
                'model_path': model_path
            })
            
            if mape < best_mape:
                best_mape = mape
                best_params = params
                best_result = result
                print(f"    *** –ù–û–í–´–ô –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! ***")
                
        except Exception as e:
            print(f"    –û–®–ò–ë–ö–ê: {str(e)}")
            continue
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n{'=' * 80}")
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–°–¢–†–û–ô–ö–ò")
    print(f"{'=' * 80}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ MAPE
    results.sort(key=lambda x: x['mape'])
    
    print(f"\n–¢–û–ü-5 –õ–£–ß–®–ò–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô:")
    print(f"{'‚Ññ':<4} {'MAPE':<10} {'MAE':<10} {'RMSE':<10} {'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'}")
    print("-" * 80)
    
    for idx, res in enumerate(results[:5], 1):
        params_str = f"chp={res['params']['changepoint_prior_scale']:.3f}, seas={res['params']['seasonality_prior_scale']:.1f}"
        print(f"{idx:<4} {res['mape']:<10.2f} {res['mae']:<10.2f} {res['rmse']:<10.2f} {params_str}")
    
    print(f"\n{'=' * 80}")
    print("–õ–£–ß–®–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print(f"{'=' * 80}")
    print(f"MAPE: {best_mape:.2f}%")
    print(f"MAE:  {best_result['metrics']['mae']:.2f}")
    print(f"RMSE: {best_result['metrics']['rmse']:.2f}")
    print(f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    for key, value in best_params.items():
        print(f"  {key}: {value}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    best_config_path = os.path.join(output_dir, "best_config.json")
    with open(best_config_path, 'w', encoding='utf-8') as f:
        json.dump({
            'params': best_params,
            'metrics': best_result['metrics'],
            'model_path': best_result.get('model_path', '')
        }, f, indent=2, ensure_ascii=False)
    
    all_results_path = os.path.join(output_dir, "all_results.json")
    with open(all_results_path, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"   –õ—É—á—à–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {best_config_path}")
    print(f"   –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {all_results_path}")
    
    return best_params, best_result


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Prophet")
    parser.add_argument("--shop_csv", default="data/processed/sales_data_shop.csv")
    parser.add_argument("--output_dir", default="models/tuned")
    
    args = parser.parse_args()
    
    hyperparameter_tuning(args.shop_csv, args.output_dir)

