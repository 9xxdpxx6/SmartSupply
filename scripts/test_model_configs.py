"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –º–æ–¥–µ–ª–∏.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GUI.
"""
import sys
import os
import pandas as pd
import numpy as np
from pathlib import Path

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.train import train_prophet
import json
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_model_configurations(shop_csv_path: str, output_dir: str = "models/test_configs"):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    
    Args:
        shop_csv_path: –ü—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º shop-level CSV
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
    """
    os.makedirs(output_dir, exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(shop_csv_path):
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {shop_csv_path}")
        return
    
    logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {shop_csv_path}")
    logger.info("=" * 80)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    configs = [
        {
            "name": "–í–∞—Ä–∏–∞–Ω—Ç –ê (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è): Log-transform + Additive",
            "include_regressors": False,
            "log_transform": True,
            "interval_width": 0.95,
            "holdout_frac": 0.2,
            "changepoint_prior_scale": 0.10,
            "seasonality_prior_scale": 18.0,
            "seasonality_mode": "additive"
        },
        {
            "name": "–í–∞—Ä–∏–∞–Ω—Ç –ë: –ë–µ–∑ log-transform + Multiplicative",
            "include_regressors": False,
            "log_transform": False,
            "interval_width": 0.95,
            "holdout_frac": 0.2,
            "changepoint_prior_scale": 0.15,
            "seasonality_prior_scale": 22.0,
            "seasonality_mode": "multiplicative"
        },
        {
            "name": "–í–∞—Ä–∏–∞–Ω—Ç –í: Log-transform + Additive (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π)",
            "include_regressors": False,
            "log_transform": True,
            "interval_width": 0.95,
            "holdout_frac": 0.2,
            "changepoint_prior_scale": 0.15,
            "seasonality_prior_scale": 20.0,
            "seasonality_mode": "additive"
        },
        {
            "name": "–í–∞—Ä–∏–∞–Ω—Ç –ì: –ë–µ–∑ log-transform + Multiplicative (–≤—ã—Å–æ–∫–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å)",
            "include_regressors": False,
            "log_transform": False,
            "interval_width": 0.95,
            "holdout_frac": 0.2,
            "changepoint_prior_scale": 0.20,
            "seasonality_prior_scale": 25.0,
            "seasonality_mode": "multiplicative"
        },
        {
            "name": "–í–∞—Ä–∏–∞–Ω—Ç –î: Log-transform + Additive + Regressors",
            "include_regressors": True,
            "log_transform": True,
            "interval_width": 0.95,
            "holdout_frac": 0.2,
            "changepoint_prior_scale": 0.10,
            "seasonality_prior_scale": 18.0,
            "seasonality_mode": "additive"
        },
        {
            "name": "–í–∞—Ä–∏–∞–Ω—Ç –ï: –ë–∞–∑–æ–≤—ã–π (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)",
            "include_regressors": False,
            "log_transform": False,
            "interval_width": 0.95,
            "holdout_frac": 0.2,
            "changepoint_prior_scale": 0.05,
            "seasonality_prior_scale": 10.0,
            "seasonality_mode": "additive"
        },
    ]
    
    results = []
    
    for i, config in enumerate(configs, 1):
        logger.info(f"\n{'=' * 80}")
        logger.info(f"–¢–µ—Å—Ç {i}/{len(configs)}: {config['name']}")
        logger.info(f"{'=' * 80}")
        
        model_name = f"test_model_{i}"
        model_path = os.path.join(output_dir, f"{model_name}.pkl")
        
        try:
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            result = train_prophet(
                shop_csv_path=shop_csv_path,
                model_out_path=model_path,
                include_regressors=config["include_regressors"],
                log_transform=config["log_transform"],
                interval_width=config["interval_width"],
                holdout_frac=config["holdout_frac"],
                changepoint_prior_scale=config["changepoint_prior_scale"],
                seasonality_prior_scale=config["seasonality_prior_scale"],
                seasonality_mode=config["seasonality_mode"]
            )
            
            metrics = result["metrics"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            test_result = {
                "config_name": config["name"],
                "model_path": model_path,
                "mae": metrics["mae"],
                "rmse": metrics["rmse"],
                "mape": metrics["mape"],
                "config": config,
                "train_samples": result["n_train"],
                "test_samples": result["n_test"]
            }
            
            results.append(test_result)
            
            # –í—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –º–æ–¥–µ–ª—å")
            logger.info(f"   MAE:  {metrics['mae']:.2f}")
            logger.info(f"   RMSE: {metrics['rmse']:.2f}")
            logger.info(f"   MAPE: {metrics['mape']:.2f}%")
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            mape_val = metrics['mape']
            if mape_val > 50:
                logger.info(f"   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –∫–∞—á–µ—Å—Ç–≤–æ (MAPE > 50%)")
            elif mape_val > 30:
                logger.info(f"   ‚ö†Ô∏è  –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (MAPE > 30%)")
            elif mape_val > 20:
                logger.info(f"   üü° –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (MAPE > 20%)")
            elif mape_val > 15:
                logger.info(f"   ‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (MAPE > 15%)")
            else:
                logger.info(f"   ‚úÖ‚úÖ –û–¢–õ–ò–ß–ù–û–ï –∫–∞—á–µ—Å—Ç–≤–æ (MAPE ‚â§ 15%)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {str(e)}")
            results.append({
                "config_name": config["name"],
                "error": str(e)
            })
    
    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info(f"\n{'=' * 80}")
    logger.info("–°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    logger.info(f"{'=' * 80}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ MAPE (–ª—É—á—à–∏–π = –ø–µ—Ä–≤—ã–π)
    valid_results = [r for r in results if "mape" in r]
    valid_results.sort(key=lambda x: x["mape"])
    
    logger.info(f"\n{'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è':<50} {'MAPE':<10} {'MAE':<10} {'RMSE':<10}")
    logger.info("-" * 80)
    
    for result in valid_results:
        mape_val = result["mape"]
        if isinstance(mape_val, (int, float)):
            status = "‚úÖ" if mape_val <= 20 else "‚ö†Ô∏è" if mape_val <= 30 else "üö®"
            logger.info(f"{status} {result['config_name']:<45} {mape_val:>6.2f}%  {result['mae']:>8.2f}  {result['rmse']:>8.2f}")
        else:
            logger.info(f"‚ùå {result['config_name']:<45} {'N/A':<10}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    if valid_results:
        best = valid_results[0]
        logger.info(f"\n{'=' * 80}")
        logger.info("üèÜ –õ–£–ß–®–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        logger.info(f"{'=' * 80}")
        logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {best['config_name']}")
        logger.info(f"MAPE: {best['mape']:.2f}%")
        logger.info(f"MAE:  {best['mae']:.2f}")
        logger.info(f"RMSE: {best['rmse']:.2f}")
        logger.info(f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        for key, value in best['config'].items():
            if key != 'name':
                logger.info(f"  {key}: {value}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
        best_result_path = os.path.join(output_dir, "best_config.json")
        with open(best_result_path, 'w', encoding='utf-8') as f:
            json.dump(best, f, indent=2, ensure_ascii=False)
        logger.info(f"\nüíæ –õ—É—á—à–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {best_result_path}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_results_path = os.path.join(output_dir, "all_results.json")
    with open(all_results_path, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    logger.info(f"üíæ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {all_results_path}")
    
    return results


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –º–æ–¥–µ–ª–∏ Prophet")
    parser.add_argument(
        "--shop_csv",
        type=str,
        default="data/processed/sales_data_shop.csv",
        help="–ü—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º shop-level CSV"
    )
    parser.add_argument(
        "--output_dir",
        type=str,
        default="models/test_configs",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π"
    )
    
    args = parser.parse_args()
    
    test_model_configurations(args.shop_csv, args.output_dir)

