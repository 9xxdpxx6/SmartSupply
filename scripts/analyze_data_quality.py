"""–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º"""
import sys
import os
from pathlib import Path
import pandas as pd
import numpy as np

sys.path.insert(0, str(Path(__file__).parent.parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df = pd.read_csv('data/processed/sales_data_shop.csv')
df['ds'] = pd.to_datetime(df['ds'])
df = df.sort_values('ds').reset_index(drop=True)

print("=" * 80)
print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –ò –ú–û–î–ï–õ–ò")
print("=" * 80)

# 1. –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
print(f"\n1. –û–ë–™–ï–ú –î–ê–ù–ù–´–•:")
print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
print(f"   –ü–µ—Ä–∏–æ–¥: {df['ds'].min().date()} to {df['ds'].max().date()}")
days_total = (df['ds'].max() - df['ds'].min()).days
print(f"   –í—Å–µ–≥–æ –¥–Ω–µ–π: {days_total}")
print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è Prophet: –º–∏–Ω–∏–º—É–º 365 –¥–Ω–µ–π –¥–ª—è yearly seasonality")

if days_total < 365:
    print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–µ–Ω—å—à–µ –≥–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö! Prophet –º–æ–∂–µ—Ç –ø–ª–æ—Ö–æ —É–ª–∞–≤–ª–∏–≤–∞—Ç—å yearly seasonality")
    print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å weekly_seasonality=True, yearly_seasonality=False")

# 2. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
print(f"\n2. –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•:")
print(f"   –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ–¥–∞–∂: {df['y'].mean():.2f}")
print(f"   –°—Ç–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {df['y'].std():.2f}")
print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {(df['y'].std() / df['y'].mean() * 100):.1f}%")
print(f"   –ú–∏–Ω: {df['y'].min():.2f}, –ú–∞–∫—Å: {df['y'].max():.2f}")
print(f"   –ú–µ–¥–∏–∞–Ω–∞: {df['y'].median():.2f}")

# –í—ã–±—Ä–æ—Å—ã
z_scores = np.abs((df['y'] - df['y'].mean()) / df['y'].std())
outliers = (z_scores > 3).sum()
print(f"   –í—ã–±—Ä–æ—Å—ã (> 3*std): {outliers} ({outliers/len(df)*100:.1f}%)")

# –ü—Ä–æ–ø—É—Å–∫–∏
missing = df['y'].isna().sum()
zeros = (df['y'] == 0).sum()
print(f"   –ü—Ä–æ–ø—É—Å–∫–∏: {missing}")
print(f"   –ù—É–ª–∏: {zeros} ({zeros/len(df)*100:.1f}%)")

# 3. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
print(f"\n3. –¢–†–ï–ù–î:")
from scipy import stats
dates_num = pd.to_datetime(df['ds']).astype(int) / 1e9
slope, intercept, r_value, p_value, std_err = stats.linregress(dates_num, df['y'].values)
print(f"   –ù–∞–∫–ª–æ–Ω —Ç—Ä–µ–Ω–¥–∞: {slope*86400:.4f} (–µ–¥–∏–Ω–∏—Ü –≤ –¥–µ–Ω—å)")
print(f"   R-squared: {r_value**2:.4f}")
print(f"   p-value: {p_value:.6f}")
if p_value < 0.05:
    print(f"   OK: –¢—Ä–µ–Ω–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º")
else:
    print(f"   WARNING: –¢—Ä–µ–Ω–¥ –Ω–µ –∑–Ω–∞—á–∏–º (p > 0.05)")

# 4. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
print(f"\n4. –°–ï–ó–û–ù–ù–û–°–¢–¨:")
# –ù–µ–¥–µ–ª—å–Ω–∞—è
df['day_of_week'] = df['ds'].dt.dayofweek
weekly_pattern = df.groupby('day_of_week')['y'].mean()
weekly_range = weekly_pattern.max() - weekly_pattern.min()
print(f"   –ù–µ–¥–µ–ª—å–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è: {weekly_range:.2f} ({weekly_range/df['y'].mean()*100:.1f}%)")

# –ú–µ—Å—è—á–Ω–∞—è
df['month'] = df['ds'].dt.month
monthly_pattern = df.groupby('month')['y'].mean()
monthly_range = monthly_pattern.max() - monthly_pattern.min()
print(f"   –ú–µ—Å—è—á–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è: {monthly_range:.2f} ({monthly_range/df['y'].mean()*100:.1f}%)")

# 5. –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è train/test
print(f"\n5. –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
holdout_frac = 0.2
n_train = int(len(df) * (1 - holdout_frac))
n_test = len(df) - n_train
train_days = (df.iloc[n_train-1]['ds'] - df.iloc[0]['ds']).days
test_days = (df.iloc[-1]['ds'] - df.iloc[n_train]['ds']).days

print(f"   Train: {n_train} –∑–∞–ø–∏—Å–µ–π, {train_days} –¥–Ω–µ–π")
print(f"   Test: {n_test} –∑–∞–ø–∏—Å–µ–π, {test_days} –¥–Ω–µ–π")
print(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {n_train/n_test:.2f}:1")
print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –º–∏–Ω–∏–º—É–º 3:1 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")

# –î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 60 –¥–Ω–µ–π
print(f"\n6. –ü–†–û–ì–ù–û–ó –ù–ê 60 –î–ù–ï–ô:")
horizon = 60
train_to_horizon_ratio = n_train / horizon
print(f"   Train –¥–Ω–µ–π / Horizon: {train_to_horizon_ratio:.1f}:1")
if train_to_horizon_ratio < 4:
    print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ {horizon} –¥–Ω–µ–π!")
    print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å–æ–∫—Ä–∞—Ç–∏—Ç—å horizon –¥–æ 30 –¥–Ω–µ–π –∏–ª–∏ —Å–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö")

# 7. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
print(f"\n7. –ü–ê–†–ê–ú–ï–¢–†–´ –ú–û–î–ï–õ–ò:")
print(f"   Prophet –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
print(f"   - changepoint_prior_scale: 0.05 (–≤—ã—Å–æ–∫–∞—è –≥–∏–±–∫–æ—Å—Ç—å)")
print(f"   - seasonality_prior_scale: 10.0 (—Å–∏–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å)")
print(f"   - yearly_seasonality: True")
print(f"   - weekly_seasonality: True")
print(f"   –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è: Prophet –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Bayesian –ø–æ–¥—Ö–æ–¥, –Ω–æ:")
if days_total < 365:
    print(f"   ‚ö†Ô∏è –° –¥–∞–Ω–Ω—ã–º–∏ < 1 –≥–æ–¥–∞ yearly_seasonality –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å—Å—è")

# 8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
print(f"\n8. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
issues = []

if days_total < 365:
    issues.append("–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è yearly seasonality")
if n_train / horizon < 4:
    issues.append("–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞")
if outliers > len(df) * 0.05:
    issues.append("–ú–Ω–æ–≥–æ –≤—ã–±—Ä–æ—Å–æ–≤ (>5%)")
if df['y'].std() / df['y'].mean() > 0.5:
    issues.append("–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (CV > 50%)")

if issues:
    print(f"   üö® –ü–†–û–ë–õ–ï–ú–´:")
    for issue in issues:
        print(f"      - {issue}")
    
    print(f"\n   üí° –†–ï–®–ï–ù–ò–Ø:")
    if days_total < 365:
        print(f"      1. –û—Ç–∫–ª—é—á–∏—Ç—å yearly_seasonality (yearly_seasonality=False)")
        print(f"      2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ weekly_seasonality")
    if n_train / horizon < 4:
        print(f"      3. –°–æ–∫—Ä–∞—Ç–∏—Ç—å horizon –¥–æ 30 –¥–Ω–µ–π")
        print(f"      4. –°–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    if outliers > len(df) * 0.05:
        print(f"      5. –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã –≤ preprocessing")
    if df['y'].std() / df['y'].mean() > 0.5:
        print(f"      6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å log_transform –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏")
        print(f"      7. –£–≤–µ–ª–∏—á–∏—Ç—å seasonality_prior_scale –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
else:
    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

print("\n" + "=" * 80)

